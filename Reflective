// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract ReflectionToken {
    string public name = "Reflective";
    string public symbol = "RFL";
    uint8 public decimals = 18;
    uint256 public totalSupply = 1_000_000_000 * 1e18;

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) public allowance;

    uint256 public reflectionFeeBP = 200; // 2%
    uint256 public constant BP_DENOM = 10000;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor() {
        _balances[msg.sender] = totalSupply;
        emit Transfer(address(0), msg.sender, totalSupply);
    }

    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    function approve(address spender, uint256 amount) public returns (bool) {
        allowance[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    function transfer(address to, uint256 amount) public returns (bool) {
        _transfer(msg.sender, to, amount);
        return true;
    }

    function transferFrom(address from, address to, uint256 amount) public returns (bool) {
        uint256 allowed = allowance[from][msg.sender];
        require(allowed >= amount, "Not allowed");
        allowance[from][msg.sender] = allowed - amount;
        _transfer(from, to, amount);
        return true;
    }

    function _transfer(address from, address to, uint256 amount) internal {
        require(_balances[from] >= amount, "Insufficient balance");

        uint256 fee = (amount * reflectionFeeBP) / BP_DENOM;
        uint256 sendAmount = amount - fee;

        _balances[from] -= amount;
        _balances[to] += sendAmount;

        // Reflection: distribute fee proportionally
        uint256 perHolder = fee / totalSupply;
        for (uint256 i = 0; i < 10; i++) { 
            // ⚠️ Example only! In production you'd track holders efficiently.
        }

        emit Transfer(from, to, sendAmount);
    }
}
