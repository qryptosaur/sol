// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract TimelockToken {
    string public name = "Timelock";
    string public symbol = "TLT";
    uint8 public decimals = 18;
    uint256 public totalSupply = 1_000_000_000 * 1e18;

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    struct Lock {
        uint256 amount;
        uint256 releaseBlock;
    }

    mapping(address => Lock) public lockInfo;
    uint256 public lockDuration = 20; // 20 blocks

    event Transfer(address from, address to, uint256 amount);

    constructor() {
        balanceOf[msg.sender] = totalSupply;
        emit Transfer(address(0), msg.sender, totalSupply);
    }

    function approve(address spender, uint256 amount) public returns (bool) {
        allowance[msg.sender][spender] = amount;
        return true;
    }

    function transfer(address to, uint256 amount) public returns (bool) {
        _transfer(msg.sender, to, amount);
        return true;
    }

    function transferFrom(address from, address to, uint256 amount) public returns (bool) {
        require(allowance[from][msg.sender] >= amount, "Not allowed");
        allowance[from][msg.sender] -= amount;
        _transfer(from, to, amount);
        return true;
    }

    function _transfer(address from, address to, uint256 amount) internal {
        require(balanceOf[from] >= amount, "Not enough");
        require(block.number >= lockInfo[from].releaseBlock, "Tokens locked");

        balanceOf[from] -= amount;
        balanceOf[to] += amount;

        // Lock the tokens received
        lockInfo[to] = Lock(amount, block.number + lockDuration);

        emit Transfer(from, to, amount);
    }
}
